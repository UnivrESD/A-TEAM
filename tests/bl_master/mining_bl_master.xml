<root>
    <tracereader name="mangroveTraceReader">
        <vcdParserConfig>
            <clockSignal name="wb_clk"/>
            <splitSignals value="Yes"/>
            <addModulePathToVariables value="No"/>
            <convertSingleBitLogicToBool value="Yes"/>
        </vcdParserConfig>
    </tracereader>

    <coneminer name="manualDefinition">
        <coneOfInfluence name="cone1">
            <directions>
            </directions>
            <atomicPropositions>
                <atomicProposition formula="busy"   dir="inout" />
                <atomicProposition formula="request"   dir="in" />
                <atomicProposition formula="wb_we"   dir="out" />
                <atomicProposition formula="write"    dir="out" />
                <atomicProposition formula="wb_stb"   dir="out" />
                <atomicProposition formula="wb_we"    dir="out" />
                <atomicProposition formula="wb_ack"   dir="in" />
                <atomicProposition formula="wb_err"   dir="in" />
                <atomicProposition formula="wb_rst"   dir="in" />
                <atomicProposition formula="wb_stall" dir="in" />
                <atomicProposition formula="request"  dir="in" />
                <atomicProposition formula="write"    dir="in" />
                <atomicProposition formula="busy"     dir="out" />
                <atomicProposition formula="reset"    dir="out" />
                <atomicProposition formula="ready_from_bus" dir="out" />
                <atomicProposition formula="error_from_bus" dir="out" />
            </atomicPropositions>
        </coneOfInfluence>
    </coneminer>

    <!-- 
        The template is "always(antecedent -> consequent)"
        The antecedent is generated automatically
    -->
    <propositionminer name="TBMiner">
        <ConsequentTemplates>
            <template value="Xp2"/>
            <template value="X(p0 & p1)"/>
                <!--
            <template value="p1 U p2"/>
            <template value="p1 R p2"/>
            <template value="X(Xp1 <-> p2)"/>
            <template value="X(p1 <-> Xp2)"/>
            <template value="p1 <-> p2"/>
            <template value="Xp1"/>
                    <template value="p1 && p2"/>
                    <template value="p1 U p2"/>
                    <template value="p1 R p2"/>
                -->
            </ConsequentTemplates>
            </propositionminer>

            <propertyminer name="A-teamMiner">
                <constraints maxVariables="3" maxNextDepth="0"/>
                    </propertyminer>
    <propertyprinter name="sva">
        <generateChecker value="No" name="sequence_detector"/>
    </propertyprinter>

</root>
