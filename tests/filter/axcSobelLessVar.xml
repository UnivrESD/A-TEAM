<root>
    <tracereader name="mangroveTraceReader">
        <vcdParserConfig>
            <clockSignal name="clk"/>
            <splitSignals value="No"/>
            <addModulePathToVariables value="No"/>
            <convertSingleBitLogicToBool value="Yes"/>
        </vcdParserConfig>
    </tracereader>

    <coneminer name="manualDefinition">
        <coneOfInfluence name="cone1">
            <directions>
            </directions>
            <atomicPropositions>
                <atomicProposition formula="p0[8:0]"   dir="in" />
                <!--
		<atomicProposition formula="p1[8:0]"   dir="in" />
                <atomicProposition formula="p2[8:0]"   dir="in" />
                <atomicProposition formula="p3[8:0]"   dir="in" />
                <atomicProposition formula="p4[8:0]"   dir="in" />
                <atomicProposition formula="p5[8:0]"   dir="in" />
                <atomicProposition formula="p6[8:0]"   dir="in" />
                <atomicProposition formula="p7[8:0]"   dir="in" />
                <atomicProposition formula="p8[8:0]"   dir="in" />
		-->
                <atomicProposition formula="out[0]"    dir="out" />
            </atomicPropositions>
        </coneOfInfluence>
    </coneminer>

    <!-- 
        The full template is "(antecedent -> consequent)"
        The antecedent is generated automatically following the template: p_1 && p_2 ... p_n

        The templates must be written in the spot ltl language.
        Some notes for the spot ltl language:
        - Use "<->" instead of "=="
        - Use "X[constant] expression" intead of "nexttime[constant] expression"
        - Use "expression1 U expression2" intead of "expression1 until expression2"
        - Use "expression1 -> expression2" intead of "expression1 |-> expression2"
        - The other operators should hold the usual syntax
    -->
    <propositionminer name="TBMiner">
        <ConsequentTemplates>
                    <template value="a"/>
                    <template value="Xa"/>
                    <!--
		    <template value="a U b"/>
		    <template value="X(Xa <-> b)"/>
                    <template value="a R b"/>
		    -->
         </ConsequentTemplates>
    </propositionminer>


    <propertyminer name="A-teamMiner">
         <constraints maxVariables="3" maxNextDepth="0"/>
                    <!--
                        <faultyTraces list="bl_master/faultyTraces/traces.xml"/>
                    -->
    </propertyminer>

                    <!--
                        <propertyQualifier name="FBQualifier"/> 
                    -->
    <propertyprinter name="sva">
        <generateChecker value="No" name="axcSobel"/>
    </propertyprinter>

</root>
