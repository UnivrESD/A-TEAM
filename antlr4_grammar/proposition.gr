grammar proposition;

file : proposition EOF;

proposition
    : atomicProp
    ;

// equality operator can be defined between booleans too.
// as = belongs to relop, booleans can be found when going
// from an atomicProp formula!
atomicProp
    : numericExpression 
    | booleanExpression 
    | logicExpression 
    | LPAREN atomicProp RPAREN
    ;

numericExpression
    :  numericExpression artop numericExpression
    |  numericExpression relop numericExpression
    |  numericExpression boolop booleanExpression
    |  LPAREN numericExpression RPAREN
    |  atom
    ;

booleanExpression
    :  
    |  NOT handleNot boolop NOT handleNot 
    |  booleanExpression boolop NOT handleNot 
    |  NOT handleNot boolop booleanExpression
    |  NOT handleNot
    |  booleanExpression boolop booleanExpression
    |  booleanExpression relop numericExpression
    |  numericExpression relop numericExpression
    |  logicExpression lrelop logicExpression
    |  booleanExpression relop logicExpression
    |  LPAREN booleanExpression RPAREN
    |  atom
    ;

handleNot
    : booleanExpression
    ;
handleNeg
    : logicExpression
    ;

logicExpression
    : NEG handleNeg logop NEG handleNeg 
    | logicExpression logop NEG handleNeg 
    | NEG handleNeg logop logicExpression
    | NEG handleNeg
    | logicExpression logop logicExpression
    | logicExpression lrelop logicExpression
    | logicExpression boolop booleanExpression
    | LPAREN logicExpression RPAREN
    | atom
    ;

atom
    : constant
    | variable
    ;

constant
    :  CONSTANT
    ;

variable
    : VARIABLE
    | NextOp LCPAREN CONSTANT RCPAREN VARIABLE
    ;

NextOp
    : 'X'
    ;
LCPAREN
    : '['
    ;

RCPAREN
    : ']'
    ;

LPAREN
    : '('
    ;

RPAREN
    : ')'
    ;


//==== Token VARIABLE ==========================================================
VARIABLE
   : VALID_ID_START VALID_ID_CHAR*
   ;

fragment VALID_ID_START
    : ('a' .. 'z')
    | ('A' .. 'Z')
    | '_'
    ;

fragment VALID_ID_CHAR
    : VALID_ID_START
    | ('0' .. '9')
    ;
//------------------------------------------------------------------------------


//==== Token CONSTANT ==========================================================
CONSTANT
   : NUMBER
   ;

fragment NUMBER
   : ('0' .. '9') + ('.' ('0' .. '9') +)?
   ;
//------------------------------------------------------------------------------


//==== Arithmetic Operators ====================================================
artop
    : TIMES
    | DIV
    | PLUS
    | MINUS
    ;

PLUS
    : '+'
    ;

MINUS
    : '-'
    ;

TIMES
    : '*'
    ;

DIV
    : '/'
    ;
//------------------------------------------------------------------------------

//==== Relational Operators for logic ====================================================
lrelop
    : EQ_
    | NEQ_
    | GT_
    | GE_
    | LT_
    | LE_
    ;

GT_
    : '>_'
    ;

GE_
    : '>=_'
    ;

LT_
    : '<_'
    ;

LE_
    : '<=_'
    ;

EQ_
    : '=_'
    ;

NEQ_
    : '!=_'
    ;
//------------------------------------------------------------------------------

//==== Relational Operators for numeric ====================================================
relop
    : EQ
    | NEQ
    | GT
    | GE
    | LT
    | LE
    ;

GT
    : '>'
    ;

GE
    : '>='
    ;

LT
    : '<'
    ;

LE
    : '<='
    ;

EQ
    : '='
    ;

NEQ
    : '!='
    ;
//------------------------------------------------------------------------------


//==== Logic Operators =========================================================
logop
    : BAND
    | BOR
    | BXOR
    | TIMES_
    | DIV_
    | PLUS_
    | MINUS_
    ;

BAND
    : '&'
    ;

BOR
    : '|'
    ;

BXOR
    : '^'
    ;

NEG
    : '~'
    ;

PLUS_
    : '+_'
    ;

MINUS_
    : '-_'
    ;

TIMES_
    : '*_'
    ;

DIV_
    : '/_'
    ;
//------------------------------------------------------------------------------


//==== Boolean Operators ========================================================
boolop
    : AND
    | OR
    ;

AND
    : '&&'
    ;

OR
    : '||'
    ;

NOT
    : '!'
    ;
//------------------------------------------------------------------------------

// Ignore: \r, \n, \t
WS : [ \t\r\n] -> skip;
