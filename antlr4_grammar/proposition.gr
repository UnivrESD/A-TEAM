grammar proposition;

file : boolean EOF;

boolean
    : LPAREN boolean RPAREN
    | NextOp LCPAREN constant RCPAREN boolean
    | PastOp LPAREN boolean ',' constant RPAREN
    | NOT boolean
    | logic relop logic
    | numeric relop numeric
    | boolean EQ boolean
    | logic EQ logic
    | numeric EQ numeric
    | boolean NEQ boolean
    | logic NEQ logic
    | numeric NEQ numeric
    | boolean booleanop=AND boolean
    | boolean booleanop=OR boolean
    | booleanAtom
    | logic /* implicit cast from logic to boolean */
    ;

booleanAtom
    : booleanConstant
    | booleanVariable
    ;

booleanConstant
    : BOOLEAN
    ;

booleanVariable
    : '<' variable ',bool>' 
    ;

logic
    : LPAREN logic RPAREN
    | LGPAREN logic RGPAREN LCPAREN constant RCPAREN
    | LGPAREN logic RGPAREN LCPAREN upper_bound ':' lower_bound RCPAREN
    | NextOp LCPAREN constant RCPAREN logic
    | PastOp LPAREN logic ',' constant RPAREN
    | NEG logic 
    | logic artop=(TIMES|DIV) logic
    | logic artop=(PLUS|MINUS) logic
    | logic logop=BAND logic
    | logic logop=BOR logic
    | logicAtom
    | numeric /* implicit cast from numeric to logic */
    ;

logicAtom
    : logicConstant
    | logicVariable
    ;

logicConstant
    : BINARY
    ;

logicVariable
    : '<' variable ',logic>' 
    ;

numeric
    : LPAREN numeric RPAREN
    | NextOp LCPAREN constant RCPAREN numeric
    | PastOp LPAREN numeric ',' constant RPAREN
    | numeric artop=(TIMES|DIV) numeric
    | numeric artop=(PLUS|MINUS) numeric
    | numericAtom
    ;

numericAtom
    : numericConstant
    | numericVariable
    ;

numericConstant
    :  NUMERIC
    ;

numericVariable
    : '<' variable ',numeric>' 
    ;

constant
    :  BINARY
    |  NUMERIC
    |  BOOLEAN 
    ;

variable
    : VARIABLE
    ;


NextOp
    : 'X'
    ;
PastOp
    : '$past'
    ;

LGPAREN
    : '{'
    ;

RGPAREN
    : '}'
    ;
LCPAREN
    : '['
    ;

RCPAREN
    : ']'
    ;

LPAREN
    : '('
    ;

RPAREN
    : ')'
    ;

upper_bound:
    constant
    ;

lower_bound:
    constant
    ;

//==== Token VARIABLE ==========================================================
VARIABLE
   : VALID_ID_START VALID_ID_CHAR*
   ;

fragment VALID_ID_START
    : ('a' .. 'z')
    | ('A' .. 'W')
    | ('Y' .. 'Z')
    | ('.')
    | '_'
    ;

fragment VALID_ID_CHAR
    : VALID_ID_START
    | ('0' .. '9')
    | ('.')
    | ('[')
    | (']')
    | (':')
    ;
//------------------------------------------------------------------------------


//==== Token constant ==========================================================
    NUMERIC
    : ('0' .. '9') + ('.' ('0' .. '9') +)?
    ;
    BINARY
    : ('\'')('b')('0' .. '1')+
    ;

    BOOLEAN
    : 'TRUE'
    | 'FALSE'
    ;

//------------------------------------------------------------------------------


//==== Arithmetic Operators ====================================================
PLUS
    : '+'
    ;

MINUS
    : '-'
    ;

TIMES
    : '*'
    ;

DIV
    : '/'
    ;
//------------------------------------------------------------------------------

//==== Relational Operators ====================================================
relop
    : GT
    | GE
    | LT
    | LE
    ;

GT
    : '>'
    ;

GE
    : '>='
    ;

LT
    : '<'
    ;

LE
    : '<='
    ;

EQ
    : '=='
    ;

NEQ
    : '!='
    ;
//------------------------------------------------------------------------------


//==== Logic Operators =========================================================

BAND
    : '&'
    ;

BOR
    : '|'
    ;

BXOR
    : '^'
    ;

NEG
    : '~'
    ;

//------------------------------------------------------------------------------


//==== Boolean Operators ========================================================

AND
    : '&&'
    ;

OR
    : '||'
    ;

NOT
    : '!'
    ;
//------------------------------------------------------------------------------

// Ignore: \r, \n, \t
WS : [ \t\r\n] -> skip;
